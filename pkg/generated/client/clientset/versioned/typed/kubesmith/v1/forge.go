/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubesmith/kubesmith/pkg/apis/kubesmith/v1"
	scheme "github.com/kubesmith/kubesmith/pkg/generated/client/clientset/versioned/scheme"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ForgesGetter has a method to return a ForgeInterface.
// A group's client should implement this interface.
type ForgesGetter interface {
	Forges(namespace string) ForgeInterface
}

// ForgeInterface has methods to work with Forge resources.
type ForgeInterface interface {
	Create(*v1.Forge) (*v1.Forge, error)
	Update(*v1.Forge) (*v1.Forge, error)
	UpdateStatus(*v1.Forge) (*v1.Forge, error)
	Delete(name string, options *meta_v1.DeleteOptions) error
	DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error
	Get(name string, options meta_v1.GetOptions) (*v1.Forge, error)
	List(opts meta_v1.ListOptions) (*v1.ForgeList, error)
	Watch(opts meta_v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Forge, err error)
	ForgeExpansion
}

// forges implements ForgeInterface
type forges struct {
	client rest.Interface
	ns     string
}

// newForges returns a Forges
func newForges(c *KubesmithV1Client, namespace string) *forges {
	return &forges{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the forge, and returns the corresponding forge object, and an error if there is any.
func (c *forges) Get(name string, options meta_v1.GetOptions) (result *v1.Forge, err error) {
	result = &v1.Forge{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("forges").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Forges that match those selectors.
func (c *forges) List(opts meta_v1.ListOptions) (result *v1.ForgeList, err error) {
	result = &v1.ForgeList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("forges").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested forges.
func (c *forges) Watch(opts meta_v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("forges").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a forge and creates it.  Returns the server's representation of the forge, and an error, if there is any.
func (c *forges) Create(forge *v1.Forge) (result *v1.Forge, err error) {
	result = &v1.Forge{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("forges").
		Body(forge).
		Do().
		Into(result)
	return
}

// Update takes the representation of a forge and updates it. Returns the server's representation of the forge, and an error, if there is any.
func (c *forges) Update(forge *v1.Forge) (result *v1.Forge, err error) {
	result = &v1.Forge{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("forges").
		Name(forge.Name).
		Body(forge).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *forges) UpdateStatus(forge *v1.Forge) (result *v1.Forge, err error) {
	result = &v1.Forge{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("forges").
		Name(forge.Name).
		SubResource("status").
		Body(forge).
		Do().
		Into(result)
	return
}

// Delete takes name of the forge and deletes it. Returns an error if one occurs.
func (c *forges) Delete(name string, options *meta_v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("forges").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *forges) DeleteCollection(options *meta_v1.DeleteOptions, listOptions meta_v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("forges").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched forge.
func (c *forges) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Forge, err error) {
	result = &v1.Forge{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("forges").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
