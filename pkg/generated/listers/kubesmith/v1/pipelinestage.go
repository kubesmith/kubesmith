/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubesmith/kubesmith/pkg/apis/kubesmith/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PipelineStageLister helps list PipelineStages.
type PipelineStageLister interface {
	// List lists all PipelineStages in the indexer.
	List(selector labels.Selector) (ret []*v1.PipelineStage, err error)
	// PipelineStages returns an object that can list and get PipelineStages.
	PipelineStages(namespace string) PipelineStageNamespaceLister
	PipelineStageListerExpansion
}

// pipelineStageLister implements the PipelineStageLister interface.
type pipelineStageLister struct {
	indexer cache.Indexer
}

// NewPipelineStageLister returns a new PipelineStageLister.
func NewPipelineStageLister(indexer cache.Indexer) PipelineStageLister {
	return &pipelineStageLister{indexer: indexer}
}

// List lists all PipelineStages in the indexer.
func (s *pipelineStageLister) List(selector labels.Selector) (ret []*v1.PipelineStage, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PipelineStage))
	})
	return ret, err
}

// PipelineStages returns an object that can list and get PipelineStages.
func (s *pipelineStageLister) PipelineStages(namespace string) PipelineStageNamespaceLister {
	return pipelineStageNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PipelineStageNamespaceLister helps list and get PipelineStages.
type PipelineStageNamespaceLister interface {
	// List lists all PipelineStages in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PipelineStage, err error)
	// Get retrieves the PipelineStage from the indexer for a given namespace and name.
	Get(name string) (*v1.PipelineStage, error)
	PipelineStageNamespaceListerExpansion
}

// pipelineStageNamespaceLister implements the PipelineStageNamespaceLister
// interface.
type pipelineStageNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PipelineStages in the indexer for a given namespace.
func (s pipelineStageNamespaceLister) List(selector labels.Selector) (ret []*v1.PipelineStage, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PipelineStage))
	})
	return ret, err
}

// Get retrieves the PipelineStage from the indexer for a given namespace and name.
func (s pipelineStageNamespaceLister) Get(name string) (*v1.PipelineStage, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("pipelinestage"), name)
	}
	return obj.(*v1.PipelineStage), nil
}
