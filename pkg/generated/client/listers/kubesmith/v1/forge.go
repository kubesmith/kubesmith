/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubesmith/kubesmith/pkg/apis/kubesmith/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ForgeLister helps list Forges.
type ForgeLister interface {
	// List lists all Forges in the indexer.
	List(selector labels.Selector) (ret []*v1.Forge, err error)
	// Forges returns an object that can list and get Forges.
	Forges(namespace string) ForgeNamespaceLister
	ForgeListerExpansion
}

// forgeLister implements the ForgeLister interface.
type forgeLister struct {
	indexer cache.Indexer
}

// NewForgeLister returns a new ForgeLister.
func NewForgeLister(indexer cache.Indexer) ForgeLister {
	return &forgeLister{indexer: indexer}
}

// List lists all Forges in the indexer.
func (s *forgeLister) List(selector labels.Selector) (ret []*v1.Forge, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Forge))
	})
	return ret, err
}

// Forges returns an object that can list and get Forges.
func (s *forgeLister) Forges(namespace string) ForgeNamespaceLister {
	return forgeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ForgeNamespaceLister helps list and get Forges.
type ForgeNamespaceLister interface {
	// List lists all Forges in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Forge, err error)
	// Get retrieves the Forge from the indexer for a given namespace and name.
	Get(name string) (*v1.Forge, error)
	ForgeNamespaceListerExpansion
}

// forgeNamespaceLister implements the ForgeNamespaceLister
// interface.
type forgeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Forges in the indexer for a given namespace.
func (s forgeNamespaceLister) List(selector labels.Selector) (ret []*v1.Forge, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Forge))
	})
	return ret, err
}

// Get retrieves the Forge from the indexer for a given namespace and name.
func (s forgeNamespaceLister) Get(name string) (*v1.Forge, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("forge"), name)
	}
	return obj.(*v1.Forge), nil
}
