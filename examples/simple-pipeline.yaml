apiVersion: kubesmith.io/v1
kind: Pipeline
metadata:
  name: simple-pipeline
  namespace: kubesmith
spec:
  workspace:
    path: /go/src/github.com/carldanley/dualshock
    repoURL: git@github.com:carldanley/dualshock4.git
    ssh:
      secret:
        name: kubesmith-forge-secrets
        key: 2db1faf68f6fc212f0d7c4a728aa30d2

  environment:
  - SAMPLE_GLOBAL_VAR=foobar

  templates:
  - name: default
    image: golang

  stages:
  - first
  - second
  - third

  jobs:
  - name: do something super easy using the built in runner (keeps syntax simple)
    stage: first
    image: ubuntu
    runner:
    - ls -la

  - name: do something that requires more time
    stage: second
    extends:
    - default
    command: ["/bin/sh", "-x", "/kubesmith/scripts/my-script.sh"]
    configMapData:
      my-script.sh: |
        go get -u golang.org/x/lint/golint
        golint ./

        # testing global variables
        echo "\"${SAMPLE_GLOBAL_VAR}\" should equal \"foobar\""

        # the following script will purposefully fail this job but note the
        # allowFailure is set to true so, even though the job failed, the pipeline
        # will continue on as if it didn't
        purposefully_fail_on_this
    allowFailure: true

  - name: demonstrate multiple script calls from one configuration
    stage: third
    image: busybox
    command: ["/bin/sh", "-c"]
    environment:
    - FOO=hello, world
    - SAMPLE_GLOBAL_VAR=really cool!
    args:
    - /bin/sh -x /kubesmith/scripts/first-script.sh;
      /bin/sh -x /kubesmith/scripts/second-script.sh;
      /bin/sh -x /kubesmith/scripts/third-script.sh;
    configMapData:
      first-script.sh: |
        echo "${FOO} from first script"
      second-script.sh: |
        echo "${FOO} from second script"
      third-script.sh: |
        echo "${FOO} from third script - this is ${SAMPLE_GLOBAL_VAR} :)"
