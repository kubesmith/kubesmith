apiVersion: kubesmith.io/v1
kind: Pipeline
metadata:
  name: simple-pipeline
  namespace: kubesmith
spec:
  workspace:
    path: /go/src/github.com/carldanley/dualshock4
    repo:
      url: git@github.com:carldanley/dualshock4.git
      ssh:
        secret:
          name: kubesmith-forge-secrets
          key: 2db1faf68f6fc212f0d7c4a728aa30d2

  environment:
    SAMPLE_GLOBAL_VAR: foobar

  templates:
  - name: default
    image: golang

  stages:
  - first
  - second
  - third

  jobs:
  - name: do something super easy using the built in runner (keeps syntax simple)
    stage: first
    image: ubuntu
    runner:
    - pwd
    - ls -la
    - echo "first stage is the best!"

  - name: do something that requires more time
    stage: second
    extends:
    - default
    command: ["/bin/sh", "-x", "/kubesmith/scripts/my-script.sh"]
    configMapData:
      my-script.sh: |
        go get -u golang.org/x/lint/golint
        golint ./

        # testing global variables
        echo "\"${SAMPLE_GLOBAL_VAR}\" should equal \"foobar\""
    allowFailure: true

  - name: create-an-artifact-on-success
    stage: second
    extends:
    - default
    runner:
    - mkdir -p ./success
    - echo "testing artifacts on success" > ./success/info.txt
    artifacts:
      onSuccess:
      - success*

  - name: create-an-artifact-on-fail
    stage: second
    extends:
    - default
    runner:
    - mkdir -p ./fail
    - echo "testing artifacts on fail" > ./fail/info.txt
    - purposefully_fail_on_this
    allowFailure: true
    artifacts:
      onFail:
      - fail*

  - name: demonstrate multiple script calls from one configuration
    stage: third
    image: busybox
    command: ["/bin/sh", "-c"]
    args:
    - /bin/sh -x /kubesmith/scripts/first-script.sh;
      /bin/sh -x /kubesmith/scripts/second-script.sh;
      /bin/sh -x /kubesmith/scripts/third-script.sh;
    environment:
      FOO: hello, world
      SAMPLE_GLOBAL_VAR: really cool!
    configMapData:
      first-script.sh: |
        echo "${FOO} from first script"
      second-script.sh: |
        echo "${FOO} from second script"
      third-script.sh: |
        echo "${FOO} from third script - this is ${SAMPLE_GLOBAL_VAR} :)"
        ls -la
        cat success/info.txt
        cat fail/info.txt
